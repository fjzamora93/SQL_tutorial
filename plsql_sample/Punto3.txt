/*==============================================================
			PARTE 3
================================================================
Crea un BLOQUE ANÓNIMO (DECLARE BEGIN END) donde ejecutar el PROCEDIMIENTO
con los valores de los argumentos recogidos en variables de sustitución 
*/


DECLARE
	v_empleado_id employees.employee_id%TYPE;
	v_oficio jobs.job_id%TYPE;

BEGIN
--AVISO: LIVE SQL NO ADMITE INTRODUCIR POR TECLADO LOS DATOS. Dejamos comentada la línea correspondiente con el '&'.
	v_empleado_id := 1;
	v_oficio := '2';
	--cambiar_empleado(&v_empleado_id, &v_oficio);
	cambiar_empleado(v_empleado_id, v_oficio);
	COMMIT;

-- Levantamos las excepciones
EXCEPTION
    WHEN OTHERS THEN
        -- Manejo de excepciones aquí
        DBMS_OUTPUT.PUT_LINE('Error: ' || SQLERRM);
        ROLLBACK; -- En caso de error, realiza un rollback para deshacer los cambios
END;
/


/*SEGUNDO BLOQUE ANÓNIMO, MISMO OBJETIVO PERO AHORA UTILIZANDO UN CUSOR*/

DECLARE
	CURSOR cursor_empleados IS SELECT employee_id  FROM employees;
	v_empleado employees.employee_id%TYPE;
	v_oficio jobs.job_id%TYPE;
BEGIN
	OPEN cursor_empleados;
	--Usamos el cursor para cambiar masivamente a todos los empleados de puesto. Debajo podremo usar el '&' 
	v_oficio := 2;
	LOOP
	    FETCH cursor_empleados INTO v_empleado;
	    EXIT WHEN cursor_empleados%NOTFOUND;
	    DBMS_OUTPUT.PUT_LINE('Nombre: ' || v_empleado || ' - Antiguo trabajo: ' || v_oficio);
		cambiar_empleado(v_empleado, v_oficio);
		--cambiar_empleado(v_empleado, &v_oficio); RECORDAMOS QUE EL '&' NO FUNCIONA EN EL LIVE SQL, DEJAMOS LA LINEA COMENTADA.
		DBMS_OUTPUT.PUT_LINE('Nombre: ' || v_empleado || ' - Nuevo trabajo: ' || v_oficio);
	END LOOP;
	CLOSE cursor_empleados;
END;
/

--Hacemos un select para comprobar que los cambios han sido aplicados.
SELECT * FROM employees;

